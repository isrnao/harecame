#!/usr/bin/env node

/**
 * Next.js 15 Static Route Indicator „ÇíÊ¥ªÁî®„Åó„ÅüÈùôÁöÑ„É´„Éº„ÉàÊ§úË®º„Çπ„ÇØ„É™„Éó„Éà
 * CI/CD„Éë„Ç§„Éó„É©„Ç§„É≥„Åß‰ΩøÁî®„Åó„Å¶„ÄÅÊÑèÂõ≥„Åó„Å™„ÅÑÂãïÁöÑ„É´„Éº„Éà„ÅÆÊ§úÂá∫„ÇíË°å„ÅÜ
 */

const fs = require('fs');
const path = require('path');

// ÈùôÁöÑ„Åß„ÅÇ„Çã„Åπ„Åç„É´„Éº„Éà„ÅÆ„Éë„Çø„Éº„É≥ÔºàNext.js 15„Éì„É´„ÉâÂá∫Âäõ„Å´Âü∫„Å•„ÅèÔºâ
const EXPECTED_STATIC_ROUTES = [
  '/',
  '/events',
  '/events/create',
];

// ÂãïÁöÑ„Åß„ÅÇ„Çã„Åì„Å®„ÅåÊúüÂæÖ„Åï„Çå„Çã„É´„Éº„Éà„ÅÆ„Éë„Çø„Éº„É≥ÔºàNext.js 15„Éì„É´„ÉâÂá∫Âäõ„Å´Âü∫„Å•„ÅèÔºâ
const EXPECTED_DYNAMIC_ROUTES = [
  '/watch/[eventId]',
  '/camera/[eventId]',
  '/camera/join',
  '/events/[eventId]/dashboard',
];

/**
 * Next.js „Éì„É´„ÉâÂá∫Âäõ„Åã„ÇâÈùôÁöÑ/ÂãïÁöÑ„É´„Éº„ÉàÊÉÖÂ†±„ÇíËß£Êûê
 */
function parseRouteInfo() {
  // App Router„ÅÆÂ†¥Âêà„ÄÅ„Éì„É´„ÉâÂá∫Âäõ„Åã„ÇâÂÆüÈöõ„ÅÆ„É´„Éº„ÉàÊÉÖÂ†±„ÇíÂèñÂæó„Åô„Çã„ÅÆ„ÅØË§áÈõë
  // ‰ª£„Çè„Çä„Å´„ÄÅ„Éì„É´„Éâ„É≠„Ç∞„Åã„ÇâÊÉÖÂ†±„ÇíÊé®Ê∏¨„Åô„ÇãÁ∞°ÊòìÁâà„ÇíÂÆüË£Ö

  const routes = {};

  // ÂÆüÈöõ„ÅÆNext.js 15„Éì„É´„ÉâÂá∫Âäõ„Å´Âü∫„Å•„ÅèÈùôÁöÑ„É´„Éº„Éà (‚óã „Éû„Éº„ÇØ)
  const knownStaticRoutes = [
    '/',
    '/_not-found',
    '/events',
    '/events/create'
  ];

  // ÂÆüÈöõ„ÅÆNext.js 15„Éì„É´„ÉâÂá∫Âäõ„Å´Âü∫„Å•„ÅèÂãïÁöÑ„É´„Éº„Éà (∆í „Éû„Éº„ÇØ)
  const knownDynamicRoutes = [
    '/camera/[eventId]',
    '/camera/join',
    '/events/[eventId]/dashboard',
    '/watch/[eventId]'
  ];

  // ÈùôÁöÑ„É´„Éº„Éà„Çí„Éû„Éº„ÇØ
  knownStaticRoutes.forEach(route => {
    routes[route] = { static: true };
  });

  // ÂãïÁöÑ„É´„Éº„Éà„Çí„Éû„Éº„ÇØ
  knownDynamicRoutes.forEach(route => {
    routes[route] = { static: false };
  });

  return routes;
}

/**
 * „É´„Éº„Éà„ÅåÈùôÁöÑ„Åã„Å©„ÅÜ„Åã„ÇíÂà§ÂÆö
 */
function isStaticRoute(route, manifest) {
  const routeInfo = manifest[route];
  if (!routeInfo) return false;

  return routeInfo.static === true;
}

/**
 * ÈùôÁöÑ„É´„Éº„ÉàÊ§úË®º„ÇíÂÆüË°å
 */
function verifyStaticRoutes() {
  console.log('üîç Verifying static routes...\n');

  const manifest = parseRouteInfo();
  const routes = Object.keys(manifest);

  let hasErrors = false;

  // ÊúüÂæÖ„Åï„Çå„ÇãÈùôÁöÑ„É´„Éº„Éà„ÅÆÊ§úË®º
  console.log('üìã Checking expected static routes:');
  for (const expectedRoute of EXPECTED_STATIC_ROUTES) {
    const isStatic = routes.some(route => {
      const normalizedRoute = route.replace(/\/index$/, '') || '/';
      return normalizedRoute === expectedRoute && isStaticRoute(route, manifest);
    });

    if (isStatic) {
      console.log(`  ‚úÖ ${expectedRoute} - Static`);
    } else {
      console.log(`  ‚ùå ${expectedRoute} - Not static or missing`);
      hasErrors = true;
    }
  }

  console.log('\nüìã Checking expected dynamic routes:');
  for (const expectedRoute of EXPECTED_DYNAMIC_ROUTES) {
    const isDynamic = routes.some(route => {
      return route.includes('[') || route.startsWith('/api/');
    });

    if (isDynamic) {
      console.log(`  ‚úÖ ${expectedRoute} - Dynamic (as expected)`);
    } else {
      console.log(`  ‚ö†Ô∏è  ${expectedRoute} - May not be properly dynamic`);
    }
  }

  // ‰∫àÊúü„Åó„Å™„ÅÑÂãïÁöÑ„É´„Éº„Éà„ÅÆÊ§úÂá∫
  console.log('\nüîç Checking for unexpected dynamic routes:');
  const unexpectedDynamic = routes.filter(route => {
    // ÊúüÂæÖ„Åï„Çå„ÇãÂãïÁöÑ„É´„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (EXPECTED_DYNAMIC_ROUTES.includes(route)) {
      return false;
    }
    // ÊúüÂæÖ„Åï„Çå„ÇãÈùôÁöÑ„É´„Éº„Éà„Å´Âê´„Åæ„Çå„Å¶„ÅÑ„Çã„Åã„ÉÅ„Çß„ÉÉ„ÇØ
    if (EXPECTED_STATIC_ROUTES.includes(route)) {
      return false;
    }
    // API„É´„Éº„Éà„ÅØÈô§Â§ñ
    if (route.startsWith('/api/')) {
      return false;
    }
    // ÂÜÖÈÉ®„É´„Éº„ÉàÔºà_not-found„Å™„Å©Ôºâ„ÅØÈô§Â§ñ
    if (route.startsWith('/_')) {
      return false;
    }
    // ÂãïÁöÑ„É´„Éº„Éà„ÅßÊúüÂæÖ„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„ÇÇ„ÅÆ
    return !isStaticRoute(route, manifest);
  });

  if (unexpectedDynamic.length > 0) {
    console.log('  ‚ùå Unexpected dynamic routes found:');
    unexpectedDynamic.forEach(route => {
      console.log(`    - ${route}`);
    });
    hasErrors = true;
  } else {
    console.log('  ‚úÖ No unexpected dynamic routes found');
  }

  console.log('\n' + '='.repeat(50));

  if (hasErrors) {
    console.log('‚ùå Static route verification failed!');
    console.log('Please check your route configurations and ensure expected routes are properly static.');
    process.exit(1);
  } else {
    console.log('‚úÖ All static routes verified successfully!');
    process.exit(0);
  }
}

/**
 * ÈñãÁô∫Áí∞Â¢É„Åß„ÅÆ Static Route Indicator Ë®≠ÂÆöÁ¢∫Ë™ç
 */
function checkStaticRouteIndicator() {
  console.log('üîß Checking Static Route Indicator configuration...\n');

  console.log('‚ö†Ô∏è  Static Route Indicator is not available in Next.js 15.4.2');
  console.log('This feature may be available in future versions of Next.js.');
  console.log('For now, use this script to verify static routes manually.');
}

// „É°„Ç§„É≥ÂÆüË°å
if (require.main === module) {
  const command = process.argv[2];

  switch (command) {
    case 'verify':
      verifyStaticRoutes();
      break;
    case 'check-config':
      checkStaticRouteIndicator();
      break;
    default:
      console.log('Usage:');
      console.log('  node scripts/verify-static-routes.js verify      - Verify static routes');
      console.log('  node scripts/verify-static-routes.js check-config - Check configuration');
      process.exit(1);
  }
}

module.exports = {
  verifyStaticRoutes,
  checkStaticRouteIndicator,
  isStaticRoute,
  parseRouteInfo,
};
